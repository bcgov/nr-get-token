---
apiVersion: v1
kind: Template
labels:
  app: "${APP_NAME}-${JOB_NAME}"
  template: "${REPO_NAME}-template"
metadata:
  name: "${REPO_NAME}-backend-dc"
objects:
- kind: NetworkSecurityPolicy
  apiVersion: secops.pathfinder.gov.bc.ca/v1alpha1
  metadata:
    name: "${APP_NAME}-backend-${JOB_NAME}-pods-to-egress-${NAMESPACE}"
  spec:
    description: |
      Allow backend pods to open connections to the internet
    source:
      - - "$namespace=${NAMESPACE}"
        - "app=${APP_NAME}-${JOB_NAME}"
        - "deploymentconfig=${APP_NAME}-backend-${JOB_NAME}"
        - role=backend
    destination:
      - - ext:network=any
- kind: NetworkSecurityPolicy
  apiVersion: secops.pathfinder.gov.bc.ca/v1alpha1
  metadata:
    name: "${APP_NAME}-backend-${JOB_NAME}-pods-to-patroni-master-${NAMESPACE}"
  spec:
    description: |
      Allow backend pods to open connections to patroni cluster
    source:
      - - "$namespace=${NAMESPACE}"
        - "app=${APP_NAME}-${JOB_NAME}"
        - "deploymentconfig=${APP_NAME}-backend-${JOB_NAME}"
        - role=backend
      - - "$namespace=${NAMESPACE}"
        - "openshift.io/deployer-pod.type=hook-pre"
    destination:
      - - "$namespace=${NAMESPACE}"
        - "cluster-name=${JOB_NAME}"
        - "statefulset=patroni-${JOB_NAME}"
        - role=master
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: "${APP_NAME}-backend-${JOB_NAME}"
  spec:
    replicas: 2
    selector:
      app: "${APP_NAME}-${JOB_NAME}"
      deploymentconfig: "${APP_NAME}-backend-${JOB_NAME}"
      role: backend
    strategy:
      type: Rolling
      rollingParams:
        timeoutSeconds: 600
        pre:
          failurePolicy: Abort
          execNewPod:
            command:
            - npm
            - run
            - migrate
            containerName: "${APP_NAME}-backend-${JOB_NAME}"
            env:
            - name: NODE_ENV
              value: production
            - name: DB_DATABASE
              valueFrom:
                secretKeyRef:
                  key: app-db-name
                  name: "patroni-${JOB_NAME}-secret"
            - name: DB_HOST
              value: "patroni-${JOB_NAME}"
            - name: DB_USERNAME
              valueFrom:
                secretKeyRef:
                  key: app-db-username
                  name: "patroni-${JOB_NAME}-secret"
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: app-db-password
                  name: "patroni-${JOB_NAME}-secret"
      resources: {}
    template:
      metadata:
        labels:
          app: "${APP_NAME}-${JOB_NAME}"
          deploymentconfig: "${APP_NAME}-backend-${JOB_NAME}"
          role: backend
      spec:
        containers:
        - image: docker-registry.default.svc:5000/${NAMESPACE}/${REPO_NAME}-backend:${JOB_NAME}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: "/api"
              port: 8080
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: "${APP_NAME}-backend-${JOB_NAME}"
          ports:
          - containerPort: 8080
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: "/api"
              port: 8080
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          env:
          - name: NODE_ENV
            value: production
          - name: DB_DATABASE
            valueFrom:
              secretKeyRef:
                key: app-db-name
                name: "patroni-${JOB_NAME}-secret"
          - name: DB_HOST
            value: "patroni-${JOB_NAME}"
          - name: DB_USERNAME
            valueFrom:
              secretKeyRef:
                key: app-db-username
                name: "patroni-${JOB_NAME}-secret"
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                key: app-db-password
                name: "patroni-${JOB_NAME}-secret"
          - name: OIDC_USERNAME
            valueFrom:
              secretKeyRef:
                key: username
                name: getok-oidc-secret
          - name: OIDC_PASSWORD
            valueFrom:
              secretKeyRef:
                key: password
                name: getok-oidc-secret
          - name: OIDC_PUBLICKEY
            valueFrom:
              secretKeyRef:
                key: publickey
                name: getok-oidc-secret
          - name: SERVER_FRONTEND
            value: "http://${HOST_ROUTE}"
          - name: SC_GETOKINT_USERNAME
            valueFrom:
              secretKeyRef:
                key: username
                name: getok-sc-getokint-secret
          - name: SC_GETOKINT_PASSWORD
            valueFrom:
              secretKeyRef:
                key: password
                name: getok-sc-getokint-secret
          - name: SC_GETOKTEST_USERNAME
            valueFrom:
              secretKeyRef:
                key: username
                name: getok-sc-getoktest-secret
          - name: SC_GETOKTEST_PASSWORD
            valueFrom:
              secretKeyRef:
                key: password
                name: getok-sc-getoktest-secret
          - name: SC_GETOKPROD_USERNAME
            valueFrom:
              secretKeyRef:
                key: username
                name: getok-sc-getokprod-secret
          - name: SC_GETOKPROD_PASSWORD
            valueFrom:
              secretKeyRef:
                key: password
                name: getok-sc-getokprod-secret
          - name: CHES_SC_USERNAME
            valueFrom:
              secretKeyRef:
                key: username
                name: getok-sc-ches-secret
          - name: CHES_SC_PASSWORD
            valueFrom:
              secretKeyRef:
                key: password
                name: getok-sc-ches-secret
          - name: SC_KC_INT_USERNAME
            valueFrom:
              secretKeyRef:
                key: username
                name: getok-sc-keycloakint-secret
          - name: SC_KC_INT_PASSWORD
            valueFrom:
              secretKeyRef:
                key: password
                name: getok-sc-keycloakint-secret
          - name: SC_KC_TEST_USERNAME
            valueFrom:
              secretKeyRef:
                key: username
                name: getok-sc-keycloaktest-secret
          - name: SC_KC_TEST_PASSWORD
            valueFrom:
              secretKeyRef:
                key: password
                name: getok-sc-keycloaktest-secret
          - name: SC_KC_PROD_USERNAME
            valueFrom:
              secretKeyRef:
                key: username
                name: getok-sc-keycloakprod-secret
          - name: SC_KC_PROD_PASSWORD
            valueFrom:
              secretKeyRef:
                key: password
                name: getok-sc-keycloakprod-secret
          envFrom:
          - configMapRef:
              name: getok-oidc-config
          - configMapRef:
              name: getok-sc-config
          - configMapRef:
              name: getok-server-config
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - "${APP_NAME}-backend-${JOB_NAME}"
        from:
          kind: ImageStreamTag
          name: "${REPO_NAME}-backend:${JOB_NAME}"
          namespace: "${NAMESPACE}"
      type: ImageChange
- apiVersion: v1
  kind: Service
  metadata:
    name: "${APP_NAME}-backend-${JOB_NAME}"
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app: "${APP_NAME}-${JOB_NAME}"
      deploymentconfig: "${APP_NAME}-backend-${JOB_NAME}"
      role: backend
- apiVersion: v1
  kind: Route
  metadata:
    name: "${APP_NAME}-backend-${JOB_NAME}"
  spec:
    host: "${HOST_ROUTE}"
    path: /api
    port:
      targetPort: 8080-tcp
    tls:
      insecureEdgeTerminationPolicy: Redirect
      termination: edge
    to:
      kind: Service
      name: "${APP_NAME}-backend-${JOB_NAME}"
      weight: 100
    wildcardPolicy: None
parameters:
- name: REPO_NAME
  description: Application repository name
  displayName: Repository Name
  required: true
- name: JOB_NAME
  description: Job identifier (i.e. 'pr-5' OR 'master')
  displayName: Job Branch Name
  required: true
- name: NAMESPACE
  description: Target namespace reference (i.e. 'k8vopl-dev')
  displayName: Target Namespace
  required: true
- name: APP_NAME
  description: Application name
  displayName: Application name
  required: true
- name: HOST_ROUTE
  description: The host the route will use to expose service outside cluster
  displayName: Host route
  required: true
